import mysql.connector
import QR_CODE_SCANNER
import threading
import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
import queue

# MySQL connection
conn_obj = mysql.connector.connect(
    host="localhost",
    user="root",
    password="R@jdeep123",
    database="retail_project_final_db_april_2025"
)
cur_obj = conn_obj.cursor()

# ---------------- DATABASE FUNCTIONS ----------------
def data_entry_sql(full_name, location, ph_no):
    sql = "INSERT INTO cust_details (full_name, location, ph_no) VALUES (%s, %s, %s)"
    data = (full_name, location, ph_no)
    try:
        cur_obj.execute(sql, data)
        conn_obj.commit()
    except mysql.connector.Error as e:
        conn_obj.rollback()

def data_retrieve(ph_no):
    query = f"SELECT * FROM cust_details WHERE ph_no={ph_no}"
    try:
        cur_obj.execute(query)
        return cur_obj.fetchone()
    except mysql.connector.Error as e:
        conn_obj.rollback()
        return None

def data_retrieve_from_p_details(p_id):
    query = f"SELECT * FROM p_details WHERE p_id={p_id}"
    try:
        cur_obj.execute(query)
        return cur_obj.fetchone()
    except mysql.connector.Error as e:
        conn_obj.rollback()
        return None

def data_entry_analytics_table(c_id, total_bill_amount, c_ph_no):
    sql = "INSERT INTO analytics_table (c_id, total_bill_amount, c_ph_no) VALUES (%s, %s, %s)"
    data = (c_id, total_bill_amount, c_ph_no)
    try:
        cur_obj.execute(sql, data)
        conn_obj.commit()
    except mysql.connector.Error as e:
        conn_obj.rollback()

# ---------------- TKINTER UI ----------------
class BillingApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Supermarket Billing System")
        self.root.geometry("900x600")
        self.root.config(bg="#f4f4f4")

        self.ph_no = ""
        self.total_bill = 0
        self.bill_items = []

        self.qr_queue = queue.Queue()

        # Heading
        tk.Label(root, text="Supermarket Billing", font=("Arial", 22, "bold"),
                 bg="#4CAF50", fg="white", pady=10).pack(fill=tk.X)

        # Frame for table
        self.tree = ttk.Treeview(root, columns=("Product", "Quantity", "Price", "Total"),
                                 show='headings', height=15)
        for col in ["Product", "Quantity", "Price", "Total"]:
            self.tree.heading(col, text=col)
        self.tree.column("Product", width=250)
        self.tree.column("Quantity", width=100, anchor="center")
        self.tree.column("Price", width=100, anchor="center")
        self.tree.column("Total", width=120, anchor="center")
        self.tree.pack(pady=20)

        # Buttons
        btn_frame = tk.Frame(root, bg="#f4f4f4")
        btn_frame.pack()
        tk.Button(btn_frame, text="Start Billing", font=("Arial", 14), bg="#2196F3", fg="white",
                  command=self.start_billing).grid(row=0, column=0, padx=10)
        tk.Button(btn_frame, text="Finish Billing", font=("Arial", 14), bg="#FF5722", fg="white",
                  command=self.finish_billing).grid(row=0, column=1, padx=10)

        # Check queue periodically
        self.root.after(200, self.process_qr_queue)

    def ask_customer_phone(self):
        self.ph_no = simpledialog.askstring("Customer Phone", "Enter customer phone number:")
        if not self.ph_no:
            return False
        cust = data_retrieve(self.ph_no)
        if not cust:
            name = simpledialog.askstring("New Customer", "Enter full name:")
            location = simpledialog.askstring("New Customer", "Enter location:")
            data_entry_sql(name, location, self.ph_no)
        return True

    def start_billing(self):
        if self.ask_customer_phone():
            threading.Thread(target=self.qr_scanner_loop, daemon=True).start()

    def qr_scanner_loop(self):
        while True:
            p_id = QR_CODE_SCANNER.qr_code_scanner().split("-")[0]
            product_details = data_retrieve_from_p_details(p_id)
            if product_details:
                self.qr_queue.put(product_details)

    def process_qr_queue(self):
        while not self.qr_queue.empty():
            product_details = self.qr_queue.get()
            p_name, p_price = product_details[1], product_details[2]
            qty = simpledialog.askinteger("Quantity", f"Enter quantity for {p_name}:",
                                          minvalue=1, maxvalue=100)
            if qty:
                total_price = p_price * qty
                self.total_bill += total_price
                self.bill_items.append((p_name, qty, p_price, total_price))
                self.tree.insert("", tk.END, values=(p_name, qty, p_price, total_price))
        self.root.after(200, self.process_qr_queue)

    def finish_billing(self):
        messagebox.showinfo("Final Bill", f"Total Amount Payable: â‚¹{self.total_bill}")
        cust_details = data_retrieve(self.ph_no)
        data_entry_analytics_table(cust_details[0], self.total_bill, self.ph_no)
        self.root.destroy()

# ---------------- MAIN ----------------
root = tk.Tk()
app = BillingApp(root)
root.mainloop()
conn_obj.close()
